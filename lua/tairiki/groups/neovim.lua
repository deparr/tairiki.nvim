local M = {}

-- see :help highlight-groups for group info

---@return tairiki.Highlights
function M.get(c, opts)
	--stylua: ignore
	return {
		TairikiTODO                 = { fg = "#ff8000" },
		ColorColumn                 = { bg = c.bg_light2 },
		Conceal                     = { fg = c.comment },
		CurSearch                   = { fg = c.bg, bg = c.orange },
		Cursor                      = { fg = c.bg, bg = c.fg },
		CursorColumn                = { bg = c.bg_light },
		CursorIM                    = { fg = c.bg, bg = c.fg },
		CursorLine                  = { bg = c.bg_light },
		CursorLineFold              = "FoldColumn",
		CursorLineNr                = { fg = c.fg, bold = true },
		CursorLineSign              = "SignColumn",
		DiffAdd                     = { fg = c.fg, bg = c.diff.add }, -- todo fg on these
		DiffChange                  = { fg = c.fg, bg = c.diff.change },
		DiffDelete                  = { fg = c.fg, bg = c.diff.remove },
		DiffText                    = { fg = c.fg, bg = c.diff.text },
		Directory                   = { fg = c.blue },
		EndOfBuffer                 = { fg = opts.ending_tildes and c.fg_dark or c.bg },
		ErrorMsg                    = { fg = c.diag.error, bold = true },
		FloatBorder                 = { fg = c.fg_dark, bg = c.bg_light },
		FloatFooter                 = "FloatTitle",
		FloatTitle                  = { fg = c.fg, bg = c.bg_light, bold = true },
		FoldColumn                  = "SignColumn",
		Folded                      = { fg = c.fg, bg = opts.transparent and c.none or c.bg_light }, -- diff
		IncSearch                   = { fg = c.bg, bg = c.orange },
		LineNr                      = { fg = c.fg_dark3 },
		LineNrAbove                 = "LineNr",
		LineNrBelow                 = "LineNr",
		MatchParen                  = { fg = c.orange }, -- todo util
		ModeMsg                     = { fg = c.fg_dark },
		MoreMsg                     = { fg = c.purple },
		MsgArea                     = { fg = c.none, bg = c.none },
		MsgSeparator                = "StatusLine",
		NonText                     = { fg = c.fg_dark }, -- todo util
		Normal                      = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
		NormalFloat                 = { fg = c.fg, bg = c.bg_light },
		NormalNC                    = { fg = c.none, bg = c.none },
		Pmenu                       = { fg = c.fg_dark, bg = c.bg_light },
		PmenuExtra                  = "Pmenu",
		PmenuExtraSel               = "PmenuSel",
		PmenuKind                   = "Pmenu",
		PmenuKindSel                = "PmenuSel",
		PmenuMatch                  = { bold = true },
		PmenuMatchSel               = { bold = true },
		PmenuSbar                   = { fg = c.none, bg = c.bg_light2 },
		PmenuSel                    = { fg = c.blue, bg = c.bg_light2 },
		PmenuThumb                  = { fg = c.fg_dark, bg = c.fg_dark },
		Question                    = { fg = c.yellow },
		QuickFixLine                = { fg = c.blue, underline = true },
		Search                      = { fg = c.bg, bg = c.yellow },
		SignColumn                  = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
		SnippetTabstop              = "Visual",
		SpecialKey                  = { fg = c.fg_dark },
		SpellBad                    = { sp = c.red, underline = not opts.undercurls, undercurl = opts.undercurls },
		SpellCap                    = { sp = c.fg_dark, underline = not opts.undercurls, undercurl = opts.undercurls },
		SpellLocal                  = { sp = c.fg_dark, underline = not opts.undercurls, undercurl = opts.undercurls },
		SpellRare                   = { sp = c.purple, underline = not opts.undercurls, undercurl = opts.undercurls },
		StatusLine                  = { fg = c.fg_dark, bg = c.bg_light },
		StatusLineNC                = { fg = c.fg_dark2, bg = c.bg_light },
		StatusLineTerm              = { fg = c.fg_dark, bg = c.bg_light },
		StatusLineTermNC            = { fg = c.fg_dark2, bg = c.bg_light },
		Substitute                  = "CurSearch",
		TabLine                     = { fg = c.comment, bg = c.bg }, -- todo
		TabLineFill                 = { bg = c.bg },
		TabLineSel                  = { fg = c.bg, bg = c.comment },
		TermCursor                  = { fg = c.none, bg = c.none }, -- diff
		TermCursorNC                = { fg = c.none, bg = c.none }, -- diff
		Title                       = { fg = c.fg, bold = true },
		Visual                      = { fg = c.none, bg = c.bg_light3, bold = opts.visual_bold },
		VisualNOS                   = "Visual",
		WarningMsg                  = { fg = c.diag.warn, bold = true },
		Whitespace                  = { fg = c.fg_dark3 },
		WildMenu                    = "CurSearch",
		WinBar                      = "StatusLine",
		WinBarNC                    = "StatusLineNC",
		WinSeparator                = { fg = c.fg_dark3 },
		lCursor                     = { fg = c.bg, bg = c.fg },

		Added                       = { fg = c.diff.add },
		Bold                        = { bold = true },
		Boolean                     = { fg = c.syn.literal }, -- todo util I guess dark can redfine these
		Changed                     = { fg = c.diff.change },
		Character                   = { fg = c.syn.string },
		Comment                     = { fg = c.comment, italic = opts.italics },
		Conditional                 = { fg = c.syn.keyword },
		Constant                    = { fg = c.syn.constant },
		Debug                       = { fg = c.diag.warn },
		Define                      = { fg = c.syn.keyword },
		Delimiter                   = { fg = c.syn.delim },
		Error                       = { fg = c.diag.error },
		Exception                   = { fg = c.syn.exception },
		Float                       = { fg = c.syn.literal },
		Function                    = { fg = c.syn.func },
		Identifier                  = { fg = c.syn.ident },
		Ignore                      = { fg = c.fg_dark },
		Include                     = { fg = c.syn.keyword },
		Italic                      = { italic = true },
		Keyword                     = { fg = c.syn.keyword },
		Label                       = { fg = c.blue }, -- todo diff orange
		Macro                       = { fg = c.syn.literal },
		Number                      = { fg = c.syn.literal },
		Operator                    = { fg = c.syn.operator },
		PreCondit                   = { fg = c.syn.keyword_mod },
		PreProc                     = { fg = c.syn.keyword },
		Removed                     = { fg = c.diff.remove },
		Repeat                      = { fg = c.syn.keyword },
		Special                     = { fg = c.syn.special, bold = true },
		SpecialChar                 = { fg = c.syn.special },
		SpecialComment              = "Comment",
		Statement                   = { fg = c.red }, -- todo diff green
		StorageClass                = { fg = c.syn.keyword_mod },
		String                      = { fg = c.syn.string },
		Structure                   = { fg = c.syn.type },
		Tag                         = { fg = c.syn.special },
		Todo                        = { fg = c.diag.warn, bold = true },
		Type                        = { fg = c.syn.type },
		Typedef                     = { fg = c.syn.type },
		Underlined                  = { underline = true },

		-- todo figure out where most of these actually get used
		-- most default to visual
		-- LspCodeLens                 = {},
		-- LspCodeLensSeparator        = {},
		LspInfoBorder               = { fg = c.fg_dark, bg = opts.transparent and c.none or c.bg_light },
		LspInlayHint                = "NonText",
		-- LspReferenceRead            = {},
		-- LspReferenceTarget          = {},
		-- LspReferenceText            = {},
		-- LspReferenceWrite           = {},
		LspSignatureActiveParameter = { underline = true, bold = true },

		DiagnosticOk                = { fg = c.diag.ok },
		DiagnosticHint              = { fg = c.diag.hint },
		DiagnosticInfo              = { fg = c.diag.info },
		DiagnosticWarn              = { fg = c.diag.warn },
		DiagnosticError             = { fg = c.diag.error },
		DiagnosticUnderlineOk       = { sp = c.diag.ok, underline = not opts.undercurls, undercurls = opts.undercurls },
		DiagnosticUnderlineHint     = { sp = c.diag.hint, underline = not opts.undercurls, undercurls = opts.undercurls },
		DiagnosticUnderlineInfo     = { sp = c.diag.info, underline = not opts.undercurls, undercurls = opts.undercurls },
		DiagnosticUnderlineWarn     = { sp = c.diag.warn, underline = not opts.undercurls, undercurls = opts.undercurls },
		DiagnosticUnderlineError    = { sp = c.diag.error, underline = not opts.undercurls, undercurls = opts.undercurls },
		-- todo big util virutal text
	}
end

return M
