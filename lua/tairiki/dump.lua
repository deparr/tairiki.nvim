local config = require("tairiki.config")

local M = {}

local term_colors = {
  "black",
  "red",
  "green",
  "yellow",
  "blue",
  "purple",
  "cyan",
  "white",
  "bright_black",
  "bright_red",
  "bright_green",
  "bright_yellow",
  "bright_blue",
  "bright_purple",
  "bright_cyan",
  "bright_white",
}

--- Generates a standalone vim colors file and opens it in a split window
---
--- Can be used to improve startup time, or to not have to depend on
--- tairiki.nvim as a plugin to provide your colorscheme.
---
--- Examples:
---
--- ```lua
--- --- dump your customized theme (ie what `:color tairiki` gives)
--- dump.colors_file()
--- ```
---
--- ```lua
--- --- dump a specific palette with a custom name
--- dump.colors_file("tomorrow-night", { palette = "tomorrow" })
--- ```
---@param colors_name? string what to name the theme
--- Defaults to `"tairiki-" .. opts.palette` if not provided
---@param opts? tairiki.Config tairiki config, see `tairiki.config.setup()`
--- Partial configs will be merged with the global config
function M.colors_file(colors_name, opts)
  opts = config.extend(opts)
  colors_name = colors_name or ("tairiki-" .. opts.palette)

  local colors = require("tairiki.palette").load(opts.palette, opts)
  local groups = require("tairiki.groups").load(opts, colors)
  local bg_style = require("tairiki.palette").get_palette_bg_style(opts.palette)

  local lines = {
    "-- this file generated by tairiki.dump.colors_file()",
    'if vim.g.colors_name then vim.cmd "hi clear" end',
    "vim.o.termguicolors = true",
    ('vim.o.background = "%s"'):format(bg_style),
    ('vim.g.colors_name = "%s"'):format(colors_name),
  }

  -- todo dump with colors, making the generated file editable
  --    though that might be possible, easily
  -- table.insert(lines, "local c = {")
  -- for k, v in pairs(colors) do
  --   local _type = type(v)
  --   if _type == "string" then
  --     table.insert(lines, ('  %s = "%s"'):format(k, v))
  --   elseif _type == "table" then
  --   end
  -- end
  -- table.insert(lines, "}")

  table.insert(lines, "local h = vim.api.nvim_set_hl")
  local names = vim.tbl_keys(groups)
  table.sort(names)
  for _, name in ipairs(names) do
    local hl = groups[name]
    hl = type(hl) == "string" and { link = hl } or hl
    table.insert(
      lines,
      ('h(0,"%s",%s)'):format(name, vim.inspect(hl, { indent = "", newline = "" }))
    )
  end

  if opts.terminal then
    for i, name in ipairs(term_colors) do
      table.insert(lines, ('vim.g.terminal_color_%d = "%s"'):format(i - 1, colors.terminal[name]))
    end
  end

  local buf = vim.api.nvim_create_buf(true, true)
  vim.api.nvim_open_win(buf, true, { split = "right" })
  vim.api.nvim_buf_set_lines(0, 0, -1, false, lines)
  vim.bo.ft = "lua"
end

return M
